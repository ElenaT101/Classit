// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: byaZbU2JReSS2QVAT9Mefp
// Component: Fd6TvYNa3aEZKP
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Logo from "../../Logo"; // plasmic-import: i-XVdJqV9_L6DA/component
import Button from "../../Button"; // plasmic-import: OFPu9JjiDm3ddD/component

import { useScreenVariants as useScreenVariants_4R8Ap7Seox4Sus } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: 4r8Ap7SEOX4SUS/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_light_saa_s_landing_page.module.css"; // plasmic-import: byaZbU2JReSS2QVAT9Mefp/projectcss
import sty from "./PlasmicNavbar.module.css"; // plasmic-import: Fd6TvYNa3aEZKP/css

export type PlasmicNavbar__VariantMembers = {};

export type PlasmicNavbar__VariantsArgs = {};
type VariantPropType = keyof PlasmicNavbar__VariantsArgs;
export const PlasmicNavbar__VariantProps = new Array<VariantPropType>();

export type PlasmicNavbar__ArgsType = {};
type ArgPropType = keyof PlasmicNavbar__ArgsType;
export const PlasmicNavbar__ArgProps = new Array<ArgPropType>();

export type PlasmicNavbar__OverridesType = {
  root?: p.Flex<"div">;
  classit?: p.Flex<typeof Logo>;
  brandName?: p.Flex<"div">;
  about?: p.Flex<typeof Button>;
  pricing?: p.Flex<typeof Button>;
  features?: p.Flex<typeof Button>;
  button?: p.Flex<typeof Button>;
  dashboardLogin?: p.Flex<"svg">;
};

export interface DefaultNavbarProps {
  className?: string;
}

function PlasmicNavbar__RenderFunc(props: {
  variants: PlasmicNavbar__VariantsArgs;
  args: PlasmicNavbar__ArgsType;
  overrides: PlasmicNavbar__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = args;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_4R8Ap7Seox4Sus()
  });

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__ubBp1)}
      >
        {true ? (
          <Logo
            data-plasmic-name={"classit"}
            data-plasmic-override={overrides.classit}
            className={classNames("__wab_instance", sty.classit)}
            largeLogo={
              hasVariant(globalVariants, "screen", "mobile") ? undefined : true
            }
          />
        ) : null}

        <div
          data-plasmic-name={"brandName"}
          data-plasmic-override={overrides.brandName}
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.brandName
          )}
        >
          {hasVariant(globalVariants, "screen", "mobile") ? (
            <React.Fragment>
              <span
                className={"plasmic_default__all plasmic_default__span"}
                style={{ color: "#000000" }}
              >
                {"CLASSIT"}
              </span>
            </React.Fragment>
          ) : (
            <React.Fragment>
              <span
                className={"plasmic_default__all plasmic_default__span"}
                style={{ color: "#000000" }}
              >
                {"CLASSIT"}
              </span>
            </React.Fragment>
          )}
        </div>

        {true ? (
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__jk1Fv)}
          >
            <Button
              data-plasmic-name={"about"}
              data-plasmic-override={overrides.about}
              className={classNames("__wab_instance", sty.about)}
              color={"navLink" as const}
              endIcon={
                <svg
                  className={classNames(projectcss.all, sty.svg___7T0KQ)}
                  role={"img"}
                />
              }
              link={"#" as const}
              startIcon={
                <svg
                  className={classNames(projectcss.all, sty.svg___6VPw)}
                  role={"img"}
                />
              }
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__xpYaz
                )}
              >
                {hasVariant(globalVariants, "screen", "mobile")
                  ? "About"
                  : "About"}
              </div>
            </Button>

            <Button
              data-plasmic-name={"pricing"}
              data-plasmic-override={overrides.pricing}
              className={classNames("__wab_instance", sty.pricing)}
              color={"navLink" as const}
              endIcon={
                <svg
                  className={classNames(projectcss.all, sty.svg__zWoQp)}
                  role={"img"}
                />
              }
              link={"#" as const}
              startIcon={
                <svg
                  className={classNames(projectcss.all, sty.svg__uaPjg)}
                  role={"img"}
                />
              }
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__nAbSn
                )}
              >
                {"Pricing"}
              </div>
            </Button>

            <Button
              data-plasmic-name={"features"}
              data-plasmic-override={overrides.features}
              className={classNames("__wab_instance", sty.features)}
              color={"navLink" as const}
              endIcon={
                <svg
                  className={classNames(projectcss.all, sty.svg__tueMm)}
                  role={"img"}
                />
              }
              link={"#" as const}
              startIcon={
                <svg
                  className={classNames(projectcss.all, sty.svg__pYsQu)}
                  role={"img"}
                />
              }
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__rl0BH
                )}
              >
                {"Features"}
              </div>
            </Button>
          </p.Stack>
        ) : null}

        {true ? (
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox___0Pvab)}
          >
            <Button
              data-plasmic-name={"button"}
              data-plasmic-override={overrides.button}
              className={classNames("__wab_instance", sty.button)}
              color={"clear" as const}
              endIcon={
                <svg
                  className={classNames(projectcss.all, sty.svg__uAip)}
                  role={"img"}
                />
              }
              iconOnly={true}
              link={"#" as const}
              startIcon={
                <svg
                  data-plasmic-name={"dashboardLogin"}
                  data-plasmic-override={overrides.dashboardLogin}
                  className={classNames(projectcss.all, sty.dashboardLogin)}
                  role={"img"}
                />
              }
            >
              {hasVariant(globalVariants, "screen", "mobile")
                ? "Watch Demo"
                : "Watch Demo"}
            </Button>
          </p.Stack>
        ) : null}
      </p.Stack>
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "classit",
    "brandName",
    "about",
    "pricing",
    "features",
    "button",
    "dashboardLogin"
  ],
  classit: ["classit"],
  brandName: ["brandName"],
  about: ["about"],
  pricing: ["pricing"],
  features: ["features"],
  button: ["button", "dashboardLogin"],
  dashboardLogin: ["dashboardLogin"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  classit: typeof Logo;
  brandName: "div";
  about: typeof Button;
  pricing: typeof Button;
  features: typeof Button;
  button: typeof Button;
  dashboardLogin: "svg";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicNavbar__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicNavbar__VariantsArgs;
    args?: PlasmicNavbar__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicNavbar__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicNavbar__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicNavbar__ArgProps,
          internalVariantPropNames: PlasmicNavbar__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicNavbar__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicNavbar";
  } else {
    func.displayName = `PlasmicNavbar.${nodeName}`;
  }
  return func;
}

export const PlasmicNavbar = Object.assign(
  // Top-level PlasmicNavbar renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    classit: makeNodeComponent("classit"),
    brandName: makeNodeComponent("brandName"),
    about: makeNodeComponent("about"),
    pricing: makeNodeComponent("pricing"),
    features: makeNodeComponent("features"),
    button: makeNodeComponent("button"),
    dashboardLogin: makeNodeComponent("dashboardLogin"),

    // Metadata about props expected for PlasmicNavbar
    internalVariantProps: PlasmicNavbar__VariantProps,
    internalArgProps: PlasmicNavbar__ArgProps
  }
);

export default PlasmicNavbar;
/* prettier-ignore-end */
